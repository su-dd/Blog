(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{431:function(e,t,a){"use strict";a.r(t);var s=a(1),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),t("p",[e._v("很久很久很久以前，"),t("code",[e._v("CPU")]),e._v("忠厚老实，一条一条指令的执行我们给它的程序，规规矩矩的进行计算和内存的存取。")]),e._v(" "),t("p",[e._v("很久很久以前， "),t("code",[e._v("CPU")]),e._v("学会了Out-Of-Order，"),t("code",[e._v("CPU")]),e._v("有了"),t("code",[e._v("Cache")]),e._v("，但一切都工作的很好，就像很久很久很久以前一样，而且工作效率得到了很大的提高。")]),e._v(" "),t("p",[e._v("很久以前，我们需要多个"),t("code",[e._v("CPU")]),e._v("一起工作，于是出现了传说中的SMP系统，每个"),t("code",[e._v("CPU")]),e._v("都有独立的"),t("code",[e._v("Cache")]),e._v("，都会乱序执行，会打乱内存存取顺序，于是事情变得复杂了……")]),e._v(" "),t("h2",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[e._v("#")]),e._v(" 问题")]),e._v(" "),t("p",[e._v("由于每个"),t("code",[e._v("CPU")]),e._v("都有自己的"),t("code",[e._v("Cache")]),e._v("，内存读写不再一定需要真的作内存访问，而是直接从"),t("code",[e._v("Cache")]),e._v("里面操作，同时"),t("code",[e._v("CPU")]),e._v("可能会在合适的时候对于内存访问进行重新排序以提高效率，在只有一个"),t("code",[e._v("CPU")]),e._v("的时候，这很完美。")]),e._v(" "),t("p",[e._v("而当有多个"),t("code",[e._v("CPU")]),e._v("的时候：从"),t("code",[e._v("Cache")]),e._v("到内存的flush操作通常是被延迟的，所以就需要某种方法保证"),t("code",[e._v("CPU")]),e._v(" A进行的内存写操作真的可以被"),t("code",[e._v("CPU")]),e._v(" B读取到。")]),e._v(" "),t("p",[t("code",[e._v("CPU")]),e._v("可能会因为某些原因（比如某两个变量同在一个"),t("code",[e._v("Cache")]),e._v("line中）而打乱")]),e._v(" "),t("ol",[t("li",[e._v("实际内存写入顺序")]),e._v(" "),t("li",[e._v("实际内存读取顺序")])]),e._v(" "),t("p",[e._v("所以就需要某种方法保证在需要的时候")]),e._v(" "),t("ol",[t("li",[e._v("之前的读写操作已经完成")]),e._v(" "),t("li",[e._v("未来的读写操作还没开始")])]),e._v(" "),t("p",[t("strong",[e._v("考虑一个例子：")]),e._v("\n​​Thread A:")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("flag "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// do nothing")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("​​​​Thread B:")]),e._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[e._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("523")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nflag "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("​​这里"),t("strong",[e._v("data")]),e._v("代表了某种数据，它可以像这里一样是一个简单的整数，也可能是某种复杂的数据结构")]),e._v(" "),t("p",[e._v("总之：我们在Thread B中对 "),t("code",[e._v("data")]),e._v(" 进行了写入，并利用 "),t("code",[e._v("flag")]),e._v(" 变量表示 "),t("code",[e._v("data")]),e._v(" 已经准备好了。 在Thread A中，一个忙等待直到发现 "),t("code",[e._v("data")]),e._v(" 已经准备好了，然后开始使用 "),t("code",[e._v("data")]),e._v(" ，这里是简单的把 "),t("code",[e._v("data")]),e._v(" 打印出来。 现在考虑如果"),t("code",[e._v("CPU")]),e._v("发现对于 "),t("code",[e._v("data")]),e._v(" 和 "),t("code",[e._v("flag")]),e._v(" 的写入，如果按照先写入 "),t("code",[e._v("flag")]),e._v(" 后写入 "),t("code",[e._v("data")]),e._v(" 的方式进行，或者考虑由于"),t("code",[e._v("Cache")]),e._v("的 flush 操作的延迟，使得内存中变量的实际修改顺序是先 "),t("code",[e._v("flag")]),e._v(" 后 "),t("code",[e._v("data")]),e._v(" ，那么都将导致Thread A的结果不正确。事实上，由于内存读入操作同样是可能乱序进行的，Thread A甚至可能在读入 "),t("code",[e._v("flag")]),e._v(" 进行判断之前就已经完成了对 "),t("code",[e._v("data")]),e._v(" 的读入操作，这同样导致错误的结果。")]),e._v(" "),t("h2",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[e._v("#")]),e._v(" 解决方案")]),e._v(" "),t("p",[e._v("在这个例子中，我们的需求是，Thread A中对于 "),t("code",[e._v("flag")]),e._v(" 判断时，后面的任何读入操作都没有开始，Thread B中对于 "),t("code",[e._v("flag")]),e._v(" 写入时，任何之前的写入操作都已经完成。")]),e._v(" "),t("p",[e._v("在Linux内核中，"),t("code",[e._v("smp_rmb()")]),e._v("、"),t("code",[e._v("smp_wmb()")]),e._v("、"),t("code",[e._v("smp_mb()")]),e._v("就是用来解决这类问题")]),e._v(" "),t("p",[t("code",[e._v("mb")]),e._v("表示memory barrier\n"),t("code",[e._v("rmb")]),e._v("表示读操作不可跨越（注意，不是人民币的意思:-P），也就是我们这个例子中的Thread A所需要的\n"),t("code",[e._v("wmb")]),e._v("表示写操作不可跨越，也就是这里Thread B所需要的\n"),t("code",[e._v("mb")]),e._v("集合了"),t("code",[e._v("rmb")]),e._v("和"),t("code",[e._v("wmb")]),e._v("的能力，读写操作都不可跨越")]),e._v(" "),t("p",[e._v("在Qt中，其支持原子操作的类"),t("code",[e._v("QAtomicInt")]),e._v("支持四种类型的操作， "),t("code",[e._v("Relaxed")]),e._v(" 、"),t("code",[e._v("Acquired")]),e._v(" 、 "),t("code",[e._v("Release")]),e._v(" 、 "),t("code",[e._v("Ordered")])]),e._v(" "),t("p",[e._v("其中:")]),e._v(" "),t("p",[t("code",[e._v("Relaxed")]),e._v(" 最为简单，就是不做特殊要求，由编译器和处理器对读写进行合适的排序")]),e._v(" "),t("p",[t("code",[e._v("Acquired")]),e._v(" 表示原子操作之后的内存操作不可被重排至原子操作之前")]),e._v(" "),t("p",[t("code",[e._v("Release")]),e._v(" 表示原子操作之前的内存操作不可被重排至原子操作之后")]),e._v(" "),t("p",[t("code",[e._v("Ordered")]),e._v(" 表示 "),t("code",[e._v("Acquired")]),e._v(" + "),t("code",[e._v("Release")])]),e._v(" "),t("p",[e._v("在前面的例子中：")]),e._v(" "),t("p",[e._v("Thread A对于 "),t("code",[e._v("flag")]),e._v(" 的读取操作需要 "),t("code",[e._v("Acquired")]),e._v("\nThread B对于 "),t("code",[e._v("flag")]),e._v(" 的写入操作需要 "),t("code",[e._v("Release")])]),e._v(" "),t("p",[e._v("在实际实现中，不同体系结构的实现方法各不相同，很多RISC机器提供了专门的指令用于实现"),t("code",[e._v("mb")]),e._v("，而在x86上面，通常使用"),t("code",[e._v("lock指令")]),e._v("前缀加上一个空操作来实现，注意当然不能真的是"),t("code",[e._v("nop")]),e._v("指令，但是可以用来实现空操作的指令其实是很多的，比如Linux中采用的"),t("code",[e._v("addl $0, 0(%esp)")]),e._v("。")]),e._v(" "),t("p",[e._v("Qt的不同类型原子操作由于本身就需要进行某种可被lock前缀修饰的操作，所以就不需要画蛇添足的再写一条空操作了，比如 "),t("code",[e._v("testAndSetOrdered")]),e._v(" 就可以直接使用"),t("code",[e._v("lock cmpxchgl")]),e._v(" 实现。")]),e._v(" "),t("h2",{attrs:{id:"qatomicint函数说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#qatomicint函数说明"}},[e._v("#")]),e._v(" QAtomicInt函数说明")]),e._v(" "),t("h3",{attrs:{id:"t-qatomicinteger-load-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#t-qatomicinteger-load-const"}},[e._v("#")]),e._v(" T QAtomicInteger::load() const")]),e._v(" "),t("p",[e._v("Atomically loads the value of this QAtomicInteger using relaxed memory ordering. The value is not modified in any way, but note that there's no guarantee that it remains so.")]),e._v(" "),t("h3",{attrs:{id:"t-qatomicinteger-loadacquire-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#t-qatomicinteger-loadacquire-const"}},[e._v("#")]),e._v(" T QAtomicInteger::loadAcquire() const")]),e._v(" "),t("p",[e._v('Atomically loads the value of this QAtomicInteger using the "Acquire" memory ordering. The value is not modified in any way, but note that there\'s no guarantee that it remains so.')]),e._v(" "),t("h3",{attrs:{id:"bool-qatomicinteger-ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-qatomicinteger-ref"}},[e._v("#")]),e._v(" bool QAtomicInteger::ref()")]),e._v(" "),t("p",[e._v("Atomically increments the value of this QAtomicInteger. Returns true if the new value is non-zero, false otherwise.\nThis function uses ordered memory ordering semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.")]),e._v(" "),t("h3",{attrs:{id:"void-qatomicinteger-store-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#void-qatomicinteger-store-t-newvalue"}},[e._v("#")]),e._v(" void QAtomicInteger::store(T newValue)")]),e._v(" "),t("p",[e._v("Atomically stores the newValue value into this atomic type, using relaxed memory ordering.")]),e._v(" "),t("h3",{attrs:{id:"void-qatomicinteger-storerelease-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#void-qatomicinteger-storerelease-t-newvalue"}},[e._v("#")]),e._v(" void QAtomicInteger::storeRelease(T newValue)")]),e._v(" "),t("p",[e._v('Atomically stores the newValue value into this atomic type, using the "Release" memory ordering.')]),e._v(" "),t("h3",{attrs:{id:"bool-qatomicinteger-testandsetacquire-t-expectedvalue-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-qatomicinteger-testandsetacquire-t-expectedvalue-t-newvalue"}},[e._v("#")]),e._v(" bool QAtomicInteger::testAndSetAcquire(T expectedValue, T newValue)")]),e._v(" "),t("p",[e._v("Atomic test-and-set.\nIf the current value of this QAtomicInteger is the expectedValue, the test-and-set functions assign the newValue to this QAtomicInteger and return true. If the values are not the same, this function does nothing and returns false.\nThis function uses acquire memory ordering semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.")]),e._v(" "),t("h3",{attrs:{id:"bool-qatomicinteger-testandsetordered-t-expectedvalue-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-qatomicinteger-testandsetordered-t-expectedvalue-t-newvalue"}},[e._v("#")]),e._v(" bool QAtomicInteger::testAndSetOrdered(T expectedValue, T newValue)")]),e._v(" "),t("p",[e._v("Atomic test-and-set.\nIf the current value of this QAtomicInteger is the expectedValue, the test-and-set functions assign the newValue to this QAtomicInteger and return true. If the values are not the same, this function does nothing and returns false.\nThis function uses ordered memory ordering semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.")]),e._v(" "),t("h3",{attrs:{id:"bool-qatomicinteger-testandsetrelaxed-t-expectedvalue-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-qatomicinteger-testandsetrelaxed-t-expectedvalue-t-newvalue"}},[e._v("#")]),e._v(" bool QAtomicInteger::testAndSetRelaxed(T expectedValue, T newValue)")]),e._v(" "),t("p",[e._v("Atomic test-and-set.\nIf the current value of this QAtomicInteger is the expectedValue, the test-and-set functions assign the newValue to this QAtomicInteger and return true. If the values are not the same, this function does nothing and returns false.\nThis function uses relaxed memory ordering semantics, leaving the compiler and processor to freely")]),e._v(" "),t("h3",{attrs:{id:"bool-qatomicinteger-testandsetrelease-t-expectedvalue-t-newvalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-qatomicinteger-testandsetrelease-t-expectedvalue-t-newvalue"}},[e._v("#")]),e._v(" bool QAtomicInteger::testAndSetRelease(T expectedValue, T newValue)")]),e._v(" "),t("p",[e._v("Atomic test-and-set.\nIf the current value of this QAtomicInteger is the expectedValue, the test-and-set functions assign the newValue to this QAtomicInteger and return true. If the values are not the same, this function does nothing and returns false.\nThis function uses release memory ordering semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.")])])}),[],!1,null,null,null);t.default=r.exports}}]);